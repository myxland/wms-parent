<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.deer.wms.bill.manage.dao.MtAloneAuditNodeTaskMapper">
    <resultMap id="BaseResultMap" type="com.deer.wms.bill.manage.model.MtAloneAuditNodeTask">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="operator_id" jdbcType="INTEGER" property="operatorId"/>
        <result column="operator_name" jdbcType="VARCHAR" property="operatorName"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="version" jdbcType="VARCHAR" property="version"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="audit_task_id" jdbcType="INTEGER" property="auditTaskId"/>
        <result column="audit_task_name" jdbcType="VARCHAR" property="auditTaskName"/>
        <result column="current_audit_node_id" jdbcType="INTEGER" property="currentAuditNodeId"/>
        <result column="current_audit_node_name" jdbcType="VARCHAR" property="currentAuditNodeName"/>
        <result column="reviewer_id" jdbcType="INTEGER" property="reviewerId"/>
        <result column="is_audit" jdbcType="INTEGER" property="isAudit"/>
        <result column="audit_time" jdbcType="TIMESTAMP" property="auditTime"/>
        <result column="audit_url" jdbcType="VARCHAR" property="auditUrl"/>
        <result column="memo" jdbcType="VARCHAR" property="memo"/>
        <result column="company_id" jdbcType="INTEGER" property="companyId"/>
    </resultMap>

    <select id="findList" parameterType="com.deer.wms.bill.manage.model.MtAloneAuditNodeTaskParams"
            resultMap="BaseResultMap">
        select * from mt_alone_audit_node_task task
        where task.audit_task_id=#{auditTaskId}
        <if test="companyId != null">
            AND task.company_id = #{companyId}
        </if>
        order by task.id
    </select>

    <select id="findBacklogByUserId" parameterType="com.deer.wms.intercept.common.data.CurrentUser"
            resultMap="BaseResultMap">
     SELECT task.* FROM mt_alone_audit_node_task task,
           (SELECT relat.* FROM mt_alone_audit_relat relat,
                         (SELECT group_id FROM mt_alone_group_operator WHERE  woker_id=#{userId}) gro
                                WHERE relat.group_id= gro.group_id)  rel
    WHERE task.current_audit_node_id=rel.id
    ORDER BY task.is_audit,task.create_time desc
  </select>

    <resultMap id="TasksReadMap" type="com.deer.wms.bill.manage.model.MtAloneAuditNodeTaskRead" extends="BaseResultMap">
        <result column="read_state" jdbcType="INTEGER" property="readState"/>
    </resultMap>

    <select id="findTasksReadByUserId" parameterType="com.deer.wms.intercept.common.data.CurrentUser"
            resultMap="TasksReadMap">
    SELECT temp.* ,IF(utask.id IS NULL ,0,1)AS read_state FROM (SELECT task.* FROM mt_alone_audit_node_task task,
           (SELECT relat.* FROM mt_alone_audit_relat relat,
                         (SELECT group_id FROM mt_alone_group_operator WHERE  woker_id=#{userId}) gro
                                WHERE relat.group_id= gro.group_id)  rel

    WHERE task.current_audit_node_id=rel.id
    AND task.is_audit='1')temp

    LEFT JOIN mt_alone_user_task utask
    ON temp.id=utask.node_task_id
    AND utask.user_id=#{userId}
    ORDER BY read_state,temp.create_time DESC
  </select>

    <select id="findNotReadNumByUserId" parameterType="com.deer.wms.intercept.common.data.CurrentUser"
            resultType="java.lang.Integer">
      SELECT COUNT(*) FROM(SELECT temp.* ,IF(utask.id IS NULL ,0,1)AS read_state FROM (SELECT task.* FROM mt_alone_audit_node_task task,
           (SELECT relat.* FROM mt_alone_audit_relat relat,
                         (SELECT group_id FROM mt_alone_group_operator WHERE  woker_id=#{userId}) gro
                                WHERE relat.group_id= gro.group_id)  rel

      WHERE task.current_audit_node_id=rel.id
      AND task.is_audit=1)temp

      LEFT JOIN mt_alone_user_task utask
      ON temp.id=utask.node_task_id
      AND utask.user_id=#{userId})temp2
      WHERE temp2.read_state=0
    </select>

    <select id="findBacklogNumByUserId" parameterType="com.deer.wms.intercept.common.data.CurrentUser"
            resultType="java.lang.Integer">
        SELECT COUNT(*) FROM mt_alone_audit_node_task task,
        (SELECT relat.* FROM mt_alone_audit_relat relat,
        (SELECT group_id FROM mt_alone_group_operator WHERE
        <if test="userId != null">
            woker_id=#{userId}) gro
        </if>
        WHERE relat.group_id= gro.group_id) rel
        WHERE task.current_audit_node_id=rel.id
        and task.is_audit = 0
    </select>

    <select id="findByTaskIdAndCurrentId" parameterType="com.deer.wms.bill.manage.model.MtAloneAuditNodeTaskParams"
            resultMap="BaseResultMap">
        select * from mt_alone_audit_node_task task
        where 1=1
        <if test="auditTaskId != null">
            and task.audit_task_id=#{auditTaskId}
        </if>

        <if test="currentId != null">
            AND task.current_audit_node_id = #{currentId}
        </if>
    </select>

    <update id="updateTem" parameterType="com.deer.wms.bill.manage.model.MtAloneAuditNodeTask">
        update mt_alone_audit_node_task task
        <set>
            task.reviewer_id=#{reviewerId},
            task.audit_time=#{auditTime},
            task.is_audit=#{isAudit}
        </set>
        where task.id=#{id}
    </update>

    <update id="updateOrder" parameterType="com.deer.wms.bill.manage.model.MtAloneAuditNodeTaskParams">
        update
        ${tableName}
        <set>
            reviewe_state = 0
        </set>
        where audit_task_id=#{auditTaskId}
    </update>

    <select id="listByAuditTaskId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select * from mt_alone_audit_node_task task
        where task.audit_task_id=#{auditTaskId}
        order by task.id
    </select>
</mapper>